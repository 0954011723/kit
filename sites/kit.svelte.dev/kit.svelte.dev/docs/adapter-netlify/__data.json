{"type":"data","nodes":[null,{"type":"data","data":[{"sections":1},[2,17,35,71,101,110,125],{"title":3,"pages":4},"Getting started",[5,8,11,14],{"title":6,"path":7},"Introduction","\u002Fdocs\u002Fintroduction",{"title":9,"path":10},"Creating a project","\u002Fdocs\u002Fcreating-a-project",{"title":12,"path":13},"Project structure","\u002Fdocs\u002Fproject-structure",{"title":15,"path":16},"Web standards","\u002Fdocs\u002Fweb-standards",{"title":18,"pages":19},"Core concepts",[20,23,26,29,32],{"title":21,"path":22},"Routing","\u002Fdocs\u002Frouting",{"title":24,"path":25},"Loading data","\u002Fdocs\u002Fload",{"title":27,"path":28},"Form actions","\u002Fdocs\u002Fform-actions",{"title":30,"path":31},"Page options","\u002Fdocs\u002Fpage-options",{"title":33,"path":34},"State management","\u002Fdocs\u002Fstate-management",{"title":36,"pages":37},"Build and deploy",[38,41,44,47,50,53,56,59,62,65,68],{"title":39,"path":40},"Building your app","\u002Fdocs\u002Fbuilding-your-app",{"title":42,"path":43},"Adapters","\u002Fdocs\u002Fadapters",{"title":45,"path":46},"Zero-config deployments","\u002Fdocs\u002Fadapter-auto",{"title":48,"path":49},"Node servers","\u002Fdocs\u002Fadapter-node",{"title":51,"path":52},"Static site generation","\u002Fdocs\u002Fadapter-static",{"title":54,"path":55},"Single-page apps","\u002Fdocs\u002Fsingle-page-apps",{"title":57,"path":58},"Cloudflare Pages","\u002Fdocs\u002Fadapter-cloudflare",{"title":60,"path":61},"Cloudflare Workers","\u002Fdocs\u002Fadapter-cloudflare-workers",{"title":63,"path":64},"Netlify","\u002Fdocs\u002Fadapter-netlify",{"title":66,"path":67},"Vercel","\u002Fdocs\u002Fadapter-vercel",{"title":69,"path":70},"Writing adapters","\u002Fdocs\u002Fwriting-adapters",{"title":72,"pages":73},"Advanced",[74,77,80,83,86,89,92,95,98],{"title":75,"path":76},"Advanced routing","\u002Fdocs\u002Fadvanced-routing",{"title":78,"path":79},"Hooks","\u002Fdocs\u002Fhooks",{"title":81,"path":82},"Errors","\u002Fdocs\u002Ferrors",{"title":84,"path":85},"Link options","\u002Fdocs\u002Flink-options",{"title":87,"path":88},"Service workers","\u002Fdocs\u002Fservice-workers",{"title":90,"path":91},"Server-only modules","\u002Fdocs\u002Fserver-only-modules",{"title":93,"path":94},"Asset handling","\u002Fdocs\u002Fassets",{"title":96,"path":97},"Snapshots","\u002Fdocs\u002Fsnapshots",{"title":99,"path":100},"Packaging","\u002Fdocs\u002Fpackaging",{"title":102,"pages":103},"Best practices",[104,107],{"title":105,"path":106},"Accessibility","\u002Fdocs\u002Faccessibility",{"title":108,"path":109},"SEO","\u002Fdocs\u002Fseo",{"title":111,"pages":112},"Reference",[113,116,119,122],{"title":114,"path":115},"Configuration","\u002Fdocs\u002Fconfiguration",{"title":117,"path":118},"Command Line Interface","\u002Fdocs\u002Fcli",{"title":120,"path":121},"Modules","\u002Fdocs\u002Fmodules",{"title":123,"path":124},"Types","\u002Fdocs\u002Ftypes",{"title":126,"pages":127},"Appendix",[128,131,134,137],{"title":129,"path":130},"Integrations","\u002Fdocs\u002Fintegrations",{"title":132,"path":133},"Migrating from Sapper","\u002Fdocs\u002Fmigrating",{"title":135,"path":136},"Additional resources","\u002Fdocs\u002Fadditional-resources",{"title":138,"path":139},"Glossary","\u002Fdocs\u002Fglossary"],"uses":{}},{"type":"data","data":[{"page":1},{"file":2,"slug":3,"title":4,"content":5,"sections":6},"docs\u002F25-build-and-deploy\u002F80-adapter-netlify.md","adapter-netlify","Netlify","\u003Cp\u003ETo deploy to Netlify, use \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fsveltejs\u002Fkit\u002Ftree\u002Fmaster\u002Fpackages\u002Fadapter-netlify\"\u003E\u003Ccode\u003Eadapter-netlify\u003C\u002Fcode\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003EThis adapter will be installed by default when you use \u003Ca href=\"adapter-auto\"\u003E\u003Ccode\u003Eadapter-auto\u003C\u002Fcode\u003E\u003C\u002Fa\u003E, but adding it to your project allows you to specify Netlify-specific options.\u003C\u002Fp\u003E\n\u003Ch2 id=\"usage\"\u003EUsage\u003Ca href=\"#usage\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003EInstall with \u003Ccode\u003Enpm i -D @sveltejs\u002Fadapter-netlify\u003C\u002Fcode\u003E, then add the adapter to your \u003Ccode\u003Esvelte.config.js\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003Esvelte.config.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eimport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003Cdata-lsp lsp='import adapter' \u003Eadapter\u003C\u002Fdata-lsp\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E\u003Cdata-err\u003E&apos;@sveltejs\u002Fadapter-netlify&apos;\u003C\u002Fdata-err\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cspan class=\"error\"\u003E\u003Cspan\u003ECannot find module '@sveltejs\u002Fadapter-netlify' or its corresponding type declarations.\u003C\u002Fspan\u003E\u003Cspan class=\"code\"\u003E2307\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"error-behind\"\u003ECannot find module '@sveltejs\u002Fadapter-netlify' or its corresponding type declarations.\u003C\u002Fspan\u003E\u003Cdiv class='line'\u003E&nbsp;\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Edefault\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003Cdata-lsp lsp='(property) kit: {&amp;#10;    adapter: any;&amp;#10;}' \u003Ekit\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E    \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F\u002F default options are shown\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E    \u003Cdata-lsp lsp='(property) adapter: any' \u003Eadapter\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E\u003Cdata-lsp lsp='import adapter' \u003Eadapter\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E({\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E      \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F\u002F if true, will create a Netlify Edge Function rather\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E      \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F\u002F than using standard Node-based functions\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E      \u003Cdata-lsp lsp='(property) edge: boolean' \u003Eedge\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Efalse\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-punctuation)\"\u003E,\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E&nbsp;\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E      \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F\u002F if true, will split your app into multiple functions\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E      \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F\u002F instead of creating a single one for the entire app.\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E      \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F\u002F if `edge` is true, this option cannot be used\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E      \u003Cdata-lsp lsp='(property) split: boolean' \u003Esplit\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Efalse\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E    })\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  }\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E};\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003EThen, make sure you have a \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Fconfigure-builds\u002Ffile-based-configuration\"\u003Enetlify.toml\u003C\u002Fa\u003E file in the project root. This will determine where to write static assets based on the \u003Ccode\u003Ebuild.publish\u003C\u002Fcode\u003E settings, as per this sample configuration:\u003C\u002Fp\u003E\n\u003Cpre class='language-undefined'\u003E\u003Ccode\u003E[build]\n  command = \"npm run build\"\n  publish = \"build\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EIf the \u003Ccode\u003Enetlify.toml\u003C\u002Fcode\u003E file or the \u003Ccode\u003Ebuild.publish\u003C\u002Fcode\u003E value is missing, a default value of \u003Ccode\u003E&quot;build&quot;\u003C\u002Fcode\u003E will be used. Note that if you have set the publish directory in the Netlify UI to something else then you will need to set it in \u003Ccode\u003Enetlify.toml\u003C\u002Fcode\u003E too, or use the default value of \u003Ccode\u003E&quot;build&quot;\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"usage-node-version\"\u003ENode version\u003Ca href=\"#usage-node-version\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003ENew projects will use Node 16 by default. However, if you&#39;re upgrading a project you created a while ago it may be stuck on an older version. See \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Fconfigure-builds\u002Fmanage-dependencies\u002F#node-js-and-javascript\"\u003Ethe Netlify docs\u003C\u002Fa\u003E for details on manually specifying Node 16 or newer.\u003C\u002Fp\u003E\n\u003Ch2 id=\"netlify-edge-functions-beta\"\u003ENetlify Edge Functions (beta)\u003Ca href=\"#netlify-edge-functions-beta\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003ESvelteKit supports the beta release of \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Fnetlify-labs\u002Fexperimental-features\u002Fedge-functions\u002F\"\u003ENetlify Edge Functions\u003C\u002Fa\u003E. If you pass the option \u003Ccode\u003Eedge: true\u003C\u002Fcode\u003E to the \u003Ccode\u003Eadapter\u003C\u002Fcode\u003E function, server-side rendering will happen in a Deno-based edge function that&#39;s deployed close to the site visitor. If set to \u003Ccode\u003Efalse\u003C\u002Fcode\u003E (the default), the site will deploy to standard Node-based Netlify Functions.\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003Esvelte.config.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eimport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003Cdata-lsp lsp='import adapter' \u003Eadapter\u003C\u002Fdata-lsp\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E\u003Cdata-err\u003E&apos;@sveltejs\u002Fadapter-netlify&apos;\u003C\u002Fdata-err\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cspan class=\"error\"\u003E\u003Cspan\u003ECannot find module '@sveltejs\u002Fadapter-netlify' or its corresponding type declarations.\u003C\u002Fspan\u003E\u003Cspan class=\"code\"\u003E2307\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"error-behind\"\u003ECannot find module '@sveltejs\u002Fadapter-netlify' or its corresponding type declarations.\u003C\u002Fspan\u003E\u003Cdiv class='line'\u003E&nbsp;\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Edefault\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003Cdata-lsp lsp='(property) kit: {&amp;#10;    adapter: any;&amp;#10;}' \u003Ekit\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E    \u003Cdata-lsp lsp='(property) adapter: any' \u003Eadapter\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E\u003Cdata-lsp lsp='import adapter' \u003Eadapter\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E({\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E      \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F\u002F will create a Netlify Edge Function using Deno-based\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E      \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F\u002F rather than using standard Node-based functions\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E      \u003Cdata-lsp lsp='(property) edge: boolean' \u003Eedge\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Etrue\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E    })\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  }\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E};\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Ch2 id=\"netlify-alternatives-to-sveltekit-functionality\"\u003ENetlify alternatives to SvelteKit functionality\u003Ca href=\"#netlify-alternatives-to-sveltekit-functionality\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003EYou may build your app using functionality provided directly by SvelteKit without relying on any Netlify functionality. Using the SvelteKit versions of these features will allow them to be used in dev mode, tested with integration tests, and to work with other adapters should you ever decide to switch away from Netlify. However, in some scenarios you may find it beneficial to use the Netlify versions of these features. One example would be if you&#39;re migrating an app that&#39;s already hosted on Netlify to SvelteKit.\u003C\u002Fp\u003E\n\u003Ch3 id=\"netlify-alternatives-to-sveltekit-functionality-redirect-rules\"\u003ERedirect rules\u003Ca href=\"#netlify-alternatives-to-sveltekit-functionality-redirect-rules\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EDuring compilation, redirect rules are automatically appended to your \u003Ccode\u003E_redirects\u003C\u002Fcode\u003E file. (If it doesn&#39;t exist yet, it will be created.) That means:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003E[[redirects]]\u003C\u002Fcode\u003E in \u003Ccode\u003Enetlify.toml\u003C\u002Fcode\u003E will never match as \u003Ccode\u003E_redirects\u003C\u002Fcode\u003E has a \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Frouting\u002Fredirects\u002F#rule-processing-order\"\u003Ehigher priority\u003C\u002Fa\u003E. So always put your rules in the \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Frouting\u002Fredirects\u002F#syntax-for-the-redirects-file\"\u003E\u003Ccode\u003E_redirects\u003C\u002Fcode\u003E file\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E_redirects\u003C\u002Fcode\u003E shouldn&#39;t have any custom &quot;catch all&quot; rules such as \u003Ccode\u003E\u002F* \u002Ffoobar\u002F:splat\u003C\u002Fcode\u003E. Otherwise the automatically appended rule will never be applied as Netlify is only processing \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Frouting\u002Fredirects\u002F#rule-processing-order\"\u003Ethe first matching rule\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3 id=\"netlify-alternatives-to-sveltekit-functionality-netlify-forms\"\u003ENetlify Forms\u003Ca href=\"#netlify-alternatives-to-sveltekit-functionality-netlify-forms\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Col\u003E\n\u003Cli\u003ECreate your Netlify HTML form as described \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Fforms\u002Fsetup\u002F#html-forms\"\u003Ehere\u003C\u002Fa\u003E, e.g. as \u003Ccode\u003E\u002Froutes\u002Fcontact\u002F+page.svelte\u003C\u002Fcode\u003E. (Don&#39;t forget to add the hidden \u003Ccode\u003Eform-name\u003C\u002Fcode\u003E input element!)\u003C\u002Fli\u003E\n\u003Cli\u003ENetlify&#39;s build bot parses your HTML files at deploy time, which means your form must be \u003Ca href=\"https:\u002F\u002Fkit.svelte.dev\u002Fdocs\u002Fpage-options#prerender\"\u003Eprerendered\u003C\u002Fa\u003E as HTML. You can either add \u003Ccode\u003Eexport const prerender = true\u003C\u002Fcode\u003E to your \u003Ccode\u003Econtact.svelte\u003C\u002Fcode\u003E to prerender just that page or set the \u003Ccode\u003Ekit.prerender.force: true\u003C\u002Fcode\u003E option to prerender all pages.\u003C\u002Fli\u003E\n\u003Cli\u003EIf your Netlify form has a \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Fforms\u002Fsetup\u002F#success-messages\"\u003Ecustom success message\u003C\u002Fa\u003E like \u003Ccode\u003E&lt;form netlify ... action=&quot;\u002Fsuccess&quot;&gt;\u003C\u002Fcode\u003E then ensure the corresponding \u003Ccode\u003E\u002Froutes\u002Fsuccess\u002F+page.svelte\u003C\u002Fcode\u003E exists and is prerendered.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch3 id=\"netlify-alternatives-to-sveltekit-functionality-netlify-functions\"\u003ENetlify Functions\u003Ca href=\"#netlify-alternatives-to-sveltekit-functionality-netlify-functions\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EWith this adapter, SvelteKit endpoints are hosted as \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Ffunctions\u002Foverview\u002F\"\u003ENetlify Functions\u003C\u002Fa\u003E. Netlify function handlers have additional context, including \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Fvisitor-access\u002Fidentity\u002F\"\u003ENetlify Identity\u003C\u002Fa\u003E information. You can access this context via the \u003Ccode\u003Eevent.platform.context\u003C\u002Fcode\u003E field inside your hooks and \u003Ccode\u003E+page.server\u003C\u002Fcode\u003E or \u003Ccode\u003E+layout.server\u003C\u002Fcode\u003E endpoints. These are \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Ffunctions\u002Foverview\u002F\"\u003Eserverless functions\u003C\u002Fa\u003E when the \u003Ccode\u003Eedge\u003C\u002Fcode\u003E property is \u003Ccode\u003Efalse\u003C\u002Fcode\u003E in the adapter config or \u003Ca href=\"https:\u002F\u002Fdocs.netlify.com\u002Fedge-functions\u002Foverview\u002F#app\"\u003Eedge functions\u003C\u002Fa\u003E when it is \u003Ccode\u003Etrue\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003E+page.server.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E\u003Cdata-lsp lsp='const load: (event: any) =\u003E Promise&amp;lt;void\u003E' \u003Eload\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Easync\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E (\u003Cdata-err\u003E\u003Cdata-lsp lsp='(parameter) event: any' \u003Eevent\u003C\u002Fdata-lsp\u003E\u003C\u002Fdata-err\u003E) \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=&gt;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cspan class=\"error\"\u003E\u003Cspan\u003EAn async function or method in ES5\u002FES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.\u003C\u002Fbr\u003EParameter 'event' implicitly has an 'any' type.\u003C\u002Fspan\u003E\u003Cspan class=\"code\"\u003E2705\u003Cbr\u002F\u003E7006\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"error-behind\"\u003EAn async function or method in ES5\u002FES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.\u003C\u002Fbr\u003EParameter 'event' implicitly has an 'any' type.\u003C\u002Fspan\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const context: any' \u003Econtext\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='(parameter) event: any' \u003Eevent\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E.\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='any' \u003Eplatform\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E.\u003Cdata-lsp lsp='any' \u003Econtext\u003C\u002Fdata-lsp\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='var console: Console' \u003Econsole\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E.\u003Cdata-lsp lsp='(method) Console.log(...data: any[]): void' \u003Elog\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E(\u003Cdata-lsp lsp='const context: any' \u003Econtext\u003C\u002Fdata-lsp\u003E); \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F\u002F shows up in your functions log in the Netlify app\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E};\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003EAdditionally, you can add your own Netlify functions by creating a directory for them and adding the configuration to your \u003Ccode\u003Enetlify.toml\u003C\u002Fcode\u003E file. For example:\u003C\u002Fp\u003E\n\u003Cpre class='language-undefined'\u003E\u003Ccode\u003E[build]\n  command = \"npm run build\"\n  publish = \"build\"\n\n[functions]\n  directory = \"functions\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"troubleshooting\"\u003ETroubleshooting\u003Ca href=\"#troubleshooting\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Ch3 id=\"troubleshooting-accessing-the-file-system\"\u003EAccessing the file system\u003Ca href=\"#troubleshooting-accessing-the-file-system\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EYou can&#39;t access the file system through methods like \u003Ccode\u003Efs.readFileSync\u003C\u002Fcode\u003E in Serverless\u002FEdge environments. If you need to access files that way, do that during building the app through \u003Ca href=\"https:\u002F\u002Fkit.svelte.dev\u002Fdocs\u002Fpage-options#prerender\"\u003Eprerendering\u003C\u002Fa\u003E. If you have a blog for example and don&#39;t want to manage your content through a CMS, then you need to prerender the content (or prerender the endpoint from which you get it) and redeploy your blog everytime you add new content.\u003C\u002Fp\u003E\n",[7,14,18,31],{"title":8,"slug":9,"sections":10},"Usage","usage",[11],{"title":12,"slug":13},"Node version","usage-node-version",{"title":15,"slug":16,"sections":17},"Netlify Edge Functions (beta)","netlify-edge-functions-beta",[],{"title":19,"slug":20,"sections":21},"Netlify alternatives to SvelteKit functionality","netlify-alternatives-to-sveltekit-functionality",[22,25,28],{"title":23,"slug":24},"Redirect rules","netlify-alternatives-to-sveltekit-functionality-redirect-rules",{"title":26,"slug":27},"Netlify Forms","netlify-alternatives-to-sveltekit-functionality-netlify-forms",{"title":29,"slug":30},"Netlify Functions","netlify-alternatives-to-sveltekit-functionality-netlify-functions",{"title":32,"slug":33,"sections":34},"Troubleshooting","troubleshooting",[35],{"title":36,"slug":37},"Accessing the file system","troubleshooting-accessing-the-file-system"],"uses":{"params":["slug"]}}]}
