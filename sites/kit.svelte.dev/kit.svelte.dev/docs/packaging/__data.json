{"type":"data","nodes":[null,{"type":"data","data":[{"sections":1},[2,17,35,71,101,110,125],{"title":3,"pages":4},"Getting started",[5,8,11,14],{"title":6,"path":7},"Introduction","\u002Fdocs\u002Fintroduction",{"title":9,"path":10},"Creating a project","\u002Fdocs\u002Fcreating-a-project",{"title":12,"path":13},"Project structure","\u002Fdocs\u002Fproject-structure",{"title":15,"path":16},"Web standards","\u002Fdocs\u002Fweb-standards",{"title":18,"pages":19},"Core concepts",[20,23,26,29,32],{"title":21,"path":22},"Routing","\u002Fdocs\u002Frouting",{"title":24,"path":25},"Loading data","\u002Fdocs\u002Fload",{"title":27,"path":28},"Form actions","\u002Fdocs\u002Fform-actions",{"title":30,"path":31},"Page options","\u002Fdocs\u002Fpage-options",{"title":33,"path":34},"State management","\u002Fdocs\u002Fstate-management",{"title":36,"pages":37},"Build and deploy",[38,41,44,47,50,53,56,59,62,65,68],{"title":39,"path":40},"Building your app","\u002Fdocs\u002Fbuilding-your-app",{"title":42,"path":43},"Adapters","\u002Fdocs\u002Fadapters",{"title":45,"path":46},"Zero-config deployments","\u002Fdocs\u002Fadapter-auto",{"title":48,"path":49},"Node servers","\u002Fdocs\u002Fadapter-node",{"title":51,"path":52},"Static site generation","\u002Fdocs\u002Fadapter-static",{"title":54,"path":55},"Single-page apps","\u002Fdocs\u002Fsingle-page-apps",{"title":57,"path":58},"Cloudflare Pages","\u002Fdocs\u002Fadapter-cloudflare",{"title":60,"path":61},"Cloudflare Workers","\u002Fdocs\u002Fadapter-cloudflare-workers",{"title":63,"path":64},"Netlify","\u002Fdocs\u002Fadapter-netlify",{"title":66,"path":67},"Vercel","\u002Fdocs\u002Fadapter-vercel",{"title":69,"path":70},"Writing adapters","\u002Fdocs\u002Fwriting-adapters",{"title":72,"pages":73},"Advanced",[74,77,80,83,86,89,92,95,98],{"title":75,"path":76},"Advanced routing","\u002Fdocs\u002Fadvanced-routing",{"title":78,"path":79},"Hooks","\u002Fdocs\u002Fhooks",{"title":81,"path":82},"Errors","\u002Fdocs\u002Ferrors",{"title":84,"path":85},"Link options","\u002Fdocs\u002Flink-options",{"title":87,"path":88},"Service workers","\u002Fdocs\u002Fservice-workers",{"title":90,"path":91},"Server-only modules","\u002Fdocs\u002Fserver-only-modules",{"title":93,"path":94},"Asset handling","\u002Fdocs\u002Fassets",{"title":96,"path":97},"Snapshots","\u002Fdocs\u002Fsnapshots",{"title":99,"path":100},"Packaging","\u002Fdocs\u002Fpackaging",{"title":102,"pages":103},"Best practices",[104,107],{"title":105,"path":106},"Accessibility","\u002Fdocs\u002Faccessibility",{"title":108,"path":109},"SEO","\u002Fdocs\u002Fseo",{"title":111,"pages":112},"Reference",[113,116,119,122],{"title":114,"path":115},"Configuration","\u002Fdocs\u002Fconfiguration",{"title":117,"path":118},"Command Line Interface","\u002Fdocs\u002Fcli",{"title":120,"path":121},"Modules","\u002Fdocs\u002Fmodules",{"title":123,"path":124},"Types","\u002Fdocs\u002Ftypes",{"title":126,"pages":127},"Appendix",[128,131,134,137],{"title":129,"path":130},"Integrations","\u002Fdocs\u002Fintegrations",{"title":132,"path":133},"Migrating from Sapper","\u002Fdocs\u002Fmigrating",{"title":135,"path":136},"Additional resources","\u002Fdocs\u002Fadditional-resources",{"title":138,"path":139},"Glossary","\u002Fdocs\u002Fglossary"],"uses":{}},{"type":"data","data":[{"page":1},{"file":2,"slug":3,"title":4,"content":5,"sections":6},"docs\u002F30-advanced\u002F70-packaging.md","packaging","Packaging","\u003Cp\u003EYou can use SvelteKit to build apps as well as component libraries, using the \u003Ccode\u003E@sveltejs\u002Fpackage\u003C\u002Fcode\u003E package (\u003Ccode\u003Enpm create svelte\u003C\u002Fcode\u003E has an option to set this up for you).\u003C\u002Fp\u003E\n\u003Cp\u003EWhen you&#39;re creating an app, the contents of \u003Ccode\u003Esrc\u002Froutes\u003C\u002Fcode\u003E is the public-facing stuff; \u003Ca href=\"modules#$lib\"\u003E\u003Ccode\u003Esrc\u002Flib\u003C\u002Fcode\u003E\u003C\u002Fa\u003E contains your app&#39;s internal library.\u003C\u002Fp\u003E\n\u003Cp\u003EA component library has the exact same structure as a SvelteKit app, except that \u003Ccode\u003Esrc\u002Flib\u003C\u002Fcode\u003E is the public-facing bit, and your root \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E is used to publish the package. \u003Ccode\u003Esrc\u002Froutes\u003C\u002Fcode\u003E might be a documentation or demo site that accompanies the library, or it might just be a sandbox you use during development.\u003C\u002Fp\u003E\n\u003Cp\u003ERunning the \u003Ccode\u003Esvelte-package\u003C\u002Fcode\u003E command from \u003Ccode\u003E@sveltejs\u002Fpackage\u003C\u002Fcode\u003E will take the contents of \u003Ccode\u003Esrc\u002Flib\u003C\u002Fcode\u003E and generate a \u003Ccode\u003Edist\u003C\u002Fcode\u003E directory (which can be \u003Ca href=\"#options\"\u003Econfigured\u003C\u002Fa\u003E) containing the following:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EAll the files in \u003Ccode\u003Esrc\u002Flib\u003C\u002Fcode\u003E. Svelte components will be preprocessed, TypeScript files will be transpiled to JavaScript.\u003C\u002Fli\u003E\n\u003Cli\u003EType definitions (\u003Ccode\u003Ed.ts\u003C\u002Fcode\u003E files) which are generated for Svelte, JavaScript and TypeScript files. You need to install \u003Ccode\u003Etypescript &gt;= 4.0.0\u003C\u002Fcode\u003E for this. Type definitions are placed next to their implementation, hand-written \u003Ccode\u003Ed.ts\u003C\u002Fcode\u003E files are copied over as is. You can \u003Ca href=\"#options\"\u003Edisable generation\u003C\u002Fa\u003E, but we strongly recommend against it â€” people using your library might use TypeScript, for which they require these type definition files.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ccode\u003E@sveltejs\u002Fpackage\u003C\u002Fcode\u003E version 1 generated a \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E. This is no longer the case and it will now use the \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E from your project and validate that it is correct instead. If you&#39;re still on version 1, see \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fsveltejs\u002Fkit\u002Fpull\u002F8922\"\u003Ethis PR\u003C\u002Fa\u003E for migration instructions.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"anatomy-of-a-package-json\"\u003EAnatomy of a package.json\u003Ca href=\"#anatomy-of-a-package-json\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003ESince you&#39;re now building a library for public use, the contents of your \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E will become more important. Through it, you configure the entry points of your package, which files are published to npm, and which dependencies your library has. Let&#39;s go through the most important fields one by one.\u003C\u002Fp\u003E\n\u003Ch3 id=\"anatomy-of-a-package-json-name\"\u003Ename\u003Ca href=\"#anatomy-of-a-package-json-name\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EThis is the name of your package. It will be available for others to install using that name, and visible on \u003Ccode\u003Ehttps:\u002F\u002Fnpmjs.com\u002Fpackage\u002F&lt;name&gt;\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cpre class='language-undefined'\u003E\u003Ccode\u003E{\n  \"name\": \"your-library\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ERead more about it \u003Ca href=\"https:\u002F\u002Fdocs.npmjs.com\u002Fcli\u002Fv9\u002Fconfiguring-npm\u002Fpackage-json#name\"\u003Ehere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"anatomy-of-a-package-json-license\"\u003Elicense\u003Ca href=\"#anatomy-of-a-package-json-license\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EEvery package should have a license field so people know how they are allowed to use it. A very popular license which is also very permissive in terms of distribution and reuse without warranty is \u003Ccode\u003EMIT\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cpre class='language-undefined'\u003E\u003Ccode\u003E{\n  \"license\": \"MIT\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ERead more about it \u003Ca href=\"https:\u002F\u002Fdocs.npmjs.com\u002Fcli\u002Fv9\u002Fconfiguring-npm\u002Fpackage-json#license\"\u003Ehere\u003C\u002Fa\u003E. Note that you should also include a \u003Ccode\u003ELICENSE\u003C\u002Fcode\u003E file in your package.\u003C\u002Fp\u003E\n\u003Ch3 id=\"anatomy-of-a-package-json-files\"\u003Efiles\u003Ca href=\"#anatomy-of-a-package-json-files\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EThis tells npm which files it will pack up and upload to npm. It should contain your output folder (\u003Ccode\u003Edist\u003C\u002Fcode\u003E by default). Your \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E and \u003Ccode\u003EREADME\u003C\u002Fcode\u003E and \u003Ccode\u003ELICENSE\u003C\u002Fcode\u003E will always be included, so you don&#39;t need to specify them.\u003C\u002Fp\u003E\n\u003Cpre class='language-undefined'\u003E\u003Ccode\u003E{\n  \"files\": [\"dist\"]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ETo exclude unnecessary files (such as unit tests, or modules that are only imported from \u003Ccode\u003Esrc\u002Froutes\u003C\u002Fcode\u003E etc) you can add them to an \u003Ccode\u003E.npmignore\u003C\u002Fcode\u003E file. This will result in smaller packages that are faster to install.\u003C\u002Fp\u003E\n\u003Cp\u003ERead more about it \u003Ca href=\"https:\u002F\u002Fdocs.npmjs.com\u002Fcli\u002Fv9\u002Fconfiguring-npm\u002Fpackage-json#files\"\u003Ehere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"anatomy-of-a-package-json-exports\"\u003Eexports\u003Ca href=\"#anatomy-of-a-package-json-exports\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EThe \u003Ccode\u003E&quot;exports&quot;\u003C\u002Fcode\u003E field contains the package&#39;s entry points. If you set up a new library project through \u003Ccode\u003Enpm create svelte@latest\u003C\u002Fcode\u003E, it&#39;s set to a single export, the package root:\u003C\u002Fp\u003E\n\u003Cpre class='language-undefined'\u003E\u003Ccode\u003E{\n  \"exports\": {\n    \".\": {\n      \"types\": \".\u002Fdist\u002Findex.d.ts\",\n      \"svelte\": \".\u002Fdist\u002Findex.js\"\n    }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThis tells bundlers and tooling that your package only has one entry point, the root, and everything should be imported through that, like this:\u003C\u002Fp\u003E\n\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eimport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E { \u003Cdata-lsp lsp='import Something' \u003ESomething\u003C\u002Fdata-lsp\u003E } \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E\u003Cdata-err\u003E&apos;your-library&apos;\u003C\u002Fdata-err\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cspan class=\"error\"\u003E\u003Cspan\u003ECannot find module 'your-library' or its corresponding type declarations.\u003C\u002Fspan\u003E\u003Cspan class=\"code\"\u003E2307\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"error-behind\"\u003ECannot find module 'your-library' or its corresponding type declarations.\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThe \u003Ccode\u003Etypes\u003C\u002Fcode\u003E and \u003Ccode\u003Esvelte\u003C\u002Fcode\u003E keys are \u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fapi\u002Fpackages.html#conditional-exports\"\u003Eexport conditions\u003C\u002Fa\u003E. They tell tooling what file to import when they look up the \u003Ccode\u003Eyour-library\u003C\u002Fcode\u003E import:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003ETypeScript sees the \u003Ccode\u003Etypes\u003C\u002Fcode\u003E condition and looks up the type definition file. If you don&#39;t publish type definitions, omit this condition.\u003C\u002Fli\u003E\n\u003Cli\u003ESvelte-aware tooling sees the \u003Ccode\u003Esvelte\u003C\u002Fcode\u003E condition and knows this is a Svelte component library. If you publish a library that does not export any Svelte components and that could also work in non-Svelte projects (for example a Svelte store library), you can replace this condition with \u003Ccode\u003Edefault\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EPrevious versions of \u003Ccode\u003E@sveltejs\u002Fpackage\u003C\u002Fcode\u003E also added a \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E export. This is no longer part of the template because all tooling can now deal with a \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E not being explicitly exported.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EYou can adjust \u003Ccode\u003Eexports\u003C\u002Fcode\u003E to your liking and provide more entry points. For example, if instead of a \u003Ccode\u003Esrc\u002Flib\u002Findex.js\u003C\u002Fcode\u003E file that re-exported components you wanted to expose a \u003Ccode\u003Esrc\u002Flib\u002FFoo.svelte\u003C\u002Fcode\u003E component directly, you could create the following export map...\u003C\u002Fp\u003E\n\u003Cpre class='language-undefined'\u003E\u003Ccode\u003E{\n  \"exports\": {\n    \".\u002FFoo.svelte\": {\n      \"types\": \".\u002Fdist\u002FFoo.svelte.d.ts\",\n      \"svelte\": \".\u002Fdist\u002FFoo.svelte\"\n    }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E...and a consumer of your library could import the component like so:\u003C\u002Fp\u003E\n\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eimport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003Cdata-lsp lsp='(alias) module \"your-library\u002FFoo.svelte\"&amp;#10;import Foo' \u003EFoo\u003C\u002Fdata-lsp\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;your-library\u002FFoo.svelte&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003EBeware that doing this will need additional care if you provide type definitions. Read more about the caveat \u003Ca href=\"#typescript\"\u003Ehere\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EIn general, each key of the exports map is the path the user will have to use to import something from your package, and the value is the path to the file that will be imported or a map of export conditions which in turn contains these file paths.\u003C\u002Fp\u003E\n\u003Cp\u003ERead more about \u003Ccode\u003Eexports\u003C\u002Fcode\u003E \u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fdocs\u002Flatest-v18.x\u002Fapi\u002Fpackages.html#package-entry-points\"\u003Ehere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"anatomy-of-a-package-json-svelte\"\u003Esvelte\u003Ca href=\"#anatomy-of-a-package-json-svelte\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EThis is a legacy field that enabled tooling to recognise Svelte component libraries. It&#39;s no longer necessary when using the \u003Ccode\u003Esvelte\u003C\u002Fcode\u003E \u003Ca href=\"#anatomy-of-a-package-json-exports\"\u003Eexport condition\u003C\u002Fa\u003E, but for backwards compatibility with outdated tooling that doesn&#39;t yet know about export conditions it&#39;s good to keep it around. It should point towards your root entry point.\u003C\u002Fp\u003E\n\u003Cpre class='language-undefined'\u003E\u003Ccode\u003E{\n  \"svelte\": \".\u002Fdist\u002Findex.js\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"typescript\"\u003ETypeScript\u003Ca href=\"#typescript\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003EYou should ship type definitions for your library even if you don&#39;t use TypeScript yourself so that people who do get proper intellisense when using your library. \u003Ccode\u003E@sveltejs\u002Fpackage\u003C\u002Fcode\u003E makes the process of generating types mostly opaque to you. By default, when packaging your library, type definitions are auto-generated for JavaScript, TypeScript and Svelte files. All you need to ensure is that the \u003Ccode\u003Etypes\u003C\u002Fcode\u003E condition in the \u003Ca href=\"#anatomy-of-a-package-json-exports\"\u003Eexports\u003C\u002Fa\u003E map points to the correct files. When initialising a library project through \u003Ccode\u003Enpm create svelte@latest\u003C\u002Fcode\u003E, this is automatically setup for the root export.\u003C\u002Fp\u003E\n\u003Cp\u003EIf you have something else than a root export however â€” for example providing a \u003Ccode\u003Eyour-library\u002Ffoo\u003C\u002Fcode\u003E import â€” you need to take additional care for providing type definitions. Unfortunately, TypeScript by default will \u003Cem\u003Enot\u003C\u002Fem\u003E resolve the \u003Ccode\u003Etypes\u003C\u002Fcode\u003E condition for an export like \u003Ccode\u003E{ &quot;.\u002Ffoo&quot;: { &quot;types&quot;: &quot;.\u002Fdist\u002Ffoo.d.ts&quot;, ... }}\u003C\u002Fcode\u003E. Instead, it will search for a \u003Ccode\u003Efoo.d.ts\u003C\u002Fcode\u003E relative to the root of your library (i.e. \u003Ccode\u003Eyour-library\u002Ffoo.d.ts\u003C\u002Fcode\u003E instead of \u003Ccode\u003Eyour-library\u002Fdist\u002Ffoo.d.ts\u003C\u002Fcode\u003E). To fix this, you have two options:\u003C\u002Fp\u003E\n\u003Cp\u003EThe first option is to require people using your library to set the \u003Ccode\u003EmoduleResolution\u003C\u002Fcode\u003E option in their \u003Ccode\u003Etsconfig\u002Fjsconfig.json\u003C\u002Fcode\u003E to \u003Ccode\u003Ebundler\u003C\u002Fcode\u003E (available since TypeScript 5, the best and recommended option in the future), \u003Ccode\u003Enode16\u003C\u002Fcode\u003E or \u003Ccode\u003Enodenext\u003C\u002Fcode\u003E. This opts TypeScript into actually looking at the exports map and resolving the types correctly.\u003C\u002Fp\u003E\n\u003Cp\u003EThe second option is to (ab)use the \u003Ccode\u003EtypesVersions\u003C\u002Fcode\u003E feature from TypeScript to wire up the types. This is a field inside \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E TypeScript uses to check for different type definitions depending on the TypeScript version, and also contains a path mapping feature for that. We leverage that path mapping feature to get what we want. For the mentioned \u003Ccode\u003Efoo\u003C\u002Fcode\u003E export above, the corresponding \u003Ccode\u003EtypesVersions\u003C\u002Fcode\u003E looks like this:\u003C\u002Fp\u003E\n\u003Cpre class='language-undefined'\u003E\u003Ccode\u003E{\n  \"exports\": {\n    \".\u002Ffoo\": {\n      \"types\": \".\u002Fdist\u002Ffoo.d.ts\",\n      \"svelte\": \".\u002Fdist\u002Ffoo.js\"\n    }\n  },\n  \"typesVersions\": {\n    \"&gt;4.0\": {\n      \"foo\": [\".\u002Fdist\u002Ffoo.d.ts\"]\n    }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003E&gt;4.0\u003C\u002Fcode\u003E tells TypeScript to check the inner map if the used TypeScript version is greater than 4 (which should in practice always be true). The inner map tells TypeScript that the typings for \u003Ccode\u003Eyour-library\u002Ffoo\u003C\u002Fcode\u003E are found within \u003Ccode\u003E.\u002Fdist\u002Ffoo.d.ts\u003C\u002Fcode\u003E, which essentially replicates the \u003Ccode\u003Eexports\u003C\u002Fcode\u003E condition. You also have \u003Ccode\u003E*\u003C\u002Fcode\u003E as a wildcard at your disposal to make many type definitions at once available without repeating yourself. Note that if you opt into \u003Ccode\u003EtypesVersions\u003C\u002Fcode\u003E you have to declare all type imports through it, including the root import (which is defined as \u003Ccode\u003E&quot;index&quot;: [..]\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\n\u003Cp\u003EYou can read more about that feature \u003Ca href=\"https:\u002F\u002Fwww.typescriptlang.org\u002Fdocs\u002Fhandbook\u002Fdeclaration-files\u002Fpublishing.html#version-selection-with-typesversions\"\u003Ehere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Ch2 id=\"best-practices\"\u003EBest practices\u003Ca href=\"#best-practices\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003EYou should avoid using \u003Ca href=\"modules\"\u003ESvelteKit-specific modules\u003C\u002Fa\u003E like \u003Ccode\u003E$app\u003C\u002Fcode\u003E in your packages unless you intend for them to only be consumable by other SvelteKit projects. E.g. rather than using \u003Ccode\u003Eimport { browser } from &#39;$app\u002Fenvironment&#39;\u003C\u002Fcode\u003E you could use \u003Ccode\u003Eimport { BROWSER } from &#39;esm-env&#39;\u003C\u002Fcode\u003E (\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fbenmccann\u002Fesm-env\"\u003Esee esm-env docs\u003C\u002Fa\u003E). You may also wish to pass in things like the current URL or a navigation action as a prop rather than relying directly on \u003Ccode\u003E$app\u002Fstores\u003C\u002Fcode\u003E, \u003Ccode\u003E$app\u002Fnavigation\u003C\u002Fcode\u003E, etc. Writing your app in this more generic fashion will also make it easier to setup tools for testing, UI demos and so on.\u003C\u002Fp\u003E\n\u003Cp\u003EEnsure that you add \u003Ca href=\"\u002Fdocs\u002Fconfiguration#alias\"\u003Ealiases\u003C\u002Fa\u003E via \u003Ccode\u003Esvelte.config.js\u003C\u002Fcode\u003E (not \u003Ccode\u003Evite.config.js\u003C\u002Fcode\u003E or \u003Ccode\u003Etsconfig.json\u003C\u002Fcode\u003E), so that they are processed by \u003Ccode\u003Esvelte-package\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003EYou should think carefully about whether or not the changes you make to your package are a bug fix, a new feature, or a breaking change, and update the package version accordingly. Note that if you remove any paths from \u003Ccode\u003Eexports\u003C\u002Fcode\u003E or any \u003Ccode\u003Eexport\u003C\u002Fcode\u003E conditions inside them from your existing library, that should be regarded as a breaking change.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-diff\"\u003E\u003Ccode\u003E{\n  &quot;exports&quot;: {\n    &quot;.&quot;: {\n      &quot;types&quot;: &quot;.\u002Fdist\u002Findex.d.ts&quot;,\n\u002F\u002F changing `svelte` to `default` is a breaking change:\n\u003Cspan class=\"deleted\"\u003E\t\t\t&quot;svelte&quot;: &quot;.\u002Fdist\u002Findex.js&quot;\n\u003C\u002Fspan\u003E\u003Cspan class=\"inserted\"\u003E\t\t\t&quot;default&quot;: &quot;.\u002Fdist\u002Findex.js&quot;\n\u003C\u002Fspan\u003E    },\n\u002F\u002F removing this is a breaking change:\n\u003Cspan class=\"deleted\"\u003E\t\t&quot;.\u002Ffoo&quot;: {\n\u003C\u002Fspan\u003E\u003Cspan class=\"deleted\"\u003E\t\t\t&quot;types&quot;: &quot;.\u002Fdist\u002Ffoo.d.ts&quot;,\n\u003C\u002Fspan\u003E\u003Cspan class=\"deleted\"\u003E\t\t\t&quot;svelte&quot;: &quot;.\u002Fdist\u002Ffoo.js&quot;,\n\u003C\u002Fspan\u003E\u003Cspan class=\"deleted\"\u003E\t\t\t&quot;default&quot;: &quot;.\u002Fdist\u002Ffoo.js&quot;\n\u003C\u002Fspan\u003E\u003Cspan class=\"deleted\"\u003E\t\t},\n\u003C\u002Fspan\u003E\u002F\u002F adding this is ok:\n\u003Cspan class=\"inserted\"\u003E\t\t&quot;.\u002Fbar&quot;: {\n\u003C\u002Fspan\u003E\u003Cspan class=\"inserted\"\u003E\t\t\t&quot;types&quot;: &quot;.\u002Fdist\u002Fbar.d.ts&quot;,\n\u003C\u002Fspan\u003E\u003Cspan class=\"inserted\"\u003E\t\t\t&quot;svelte&quot;: &quot;.\u002Fdist\u002Fbar.js&quot;,\n\u003C\u002Fspan\u003E\u003Cspan class=\"inserted\"\u003E\t\t\t&quot;default&quot;: &quot;.\u002Fdist\u002Fbar.js&quot;\n\u003C\u002Fspan\u003E\u003Cspan class=\"inserted\"\u003E\t\t}\n\u003C\u002Fspan\u003E  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"options\"\u003EOptions\u003Ca href=\"#options\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003E\u003Ccode\u003Esvelte-package\u003C\u002Fcode\u003E accepts the following options:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003E-w\u003C\u002Fcode\u003E\u002F\u003Ccode\u003E--watch\u003C\u002Fcode\u003E â€” watch files in \u003Ccode\u003Esrc\u002Flib\u003C\u002Fcode\u003E for changes and rebuild the package\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E-i\u003C\u002Fcode\u003E\u002F\u003Ccode\u003E--input\u003C\u002Fcode\u003E â€” the input directory which contains all the files of the package. Defaults to \u003Ccode\u003Esrc\u002Flib\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E-o\u003C\u002Fcode\u003E\u002F\u003Ccode\u003E--o\u003C\u002Fcode\u003E â€” the output directory where the processed files are written to. Your \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E&#39;s \u003Ccode\u003Eexports\u003C\u002Fcode\u003E should point to files inside there, and the \u003Ccode\u003Efiles\u003C\u002Fcode\u003E array should include that folder. Defaults to \u003Ccode\u003Edist\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E-t\u003C\u002Fcode\u003E\u002F\u003Ccode\u003E--types\u003C\u002Fcode\u003E â€” whether or not to create type definitions (\u003Ccode\u003Ed.ts\u003C\u002Fcode\u003E files). We strongly recommend doing this as it fosters ecosystem library quality. Defaults to \u003Ccode\u003Etrue\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"publishing\"\u003EPublishing\u003Ca href=\"#publishing\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003ETo publish the generated package:\u003C\u002Fp\u003E\n\u003Cpre class='language-undefined'\u003E\u003Ccode\u003Enpm publish\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"caveats\"\u003ECaveats\u003Ca href=\"#caveats\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003EAll relative file imports need to be fully specified, adhering to Node&#39;s ESM algorithm. This means that for a file like \u003Ccode\u003Esrc\u002Flib\u002Fsomething\u002Findex.js\u003C\u002Fcode\u003E, you must include the filename with the extension:\u003C\u002Fp\u003E\n\u003Cpre class=\"language-diff\"\u003E\u003Ccode\u003E\u003Cspan class=\"deleted\"\u003Eimport { something } from &#39;.\u002Fsomething&#39;;\n\u003C\u002Fspan\u003E\u003Cspan class=\"inserted\"\u003Eimport { something } from &#39;.\u002Fsomething\u002Findex.js&#39;;\n\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EIf you are using TypeScript, you need to import \u003Ccode\u003E.ts\u003C\u002Fcode\u003E files the same way, but using a \u003Ccode\u003E.js\u003C\u002Fcode\u003E file ending, \u003Cem\u003Enot\u003C\u002Fem\u003E a \u003Ccode\u003E.ts\u003C\u002Fcode\u003E file ending. (This is a TypeScript design decision outside our control.) Setting \u003Ccode\u003E&quot;moduleResolution&quot;: &quot;NodeNext&quot;\u003C\u002Fcode\u003E in your \u003Ccode\u003Etsconfig.json\u003C\u002Fcode\u003E or \u003Ccode\u003Ejsconfig.json\u003C\u002Fcode\u003E will help you with this.\u003C\u002Fp\u003E\n\u003Cp\u003EAll files except Svelte files (preprocessed) and TypeScript files (transpiled to JavaScript) are copied across as-is.\u003C\u002Fp\u003E\n",[7,26,30,34,38,42],{"title":8,"slug":9,"sections":10},"Anatomy of a package.json","anatomy-of-a-package-json",[11,14,17,20,23],{"title":12,"slug":13},"name","anatomy-of-a-package-json-name",{"title":15,"slug":16},"license","anatomy-of-a-package-json-license",{"title":18,"slug":19},"files","anatomy-of-a-package-json-files",{"title":21,"slug":22},"exports","anatomy-of-a-package-json-exports",{"title":24,"slug":25},"svelte","anatomy-of-a-package-json-svelte",{"title":27,"slug":28,"sections":29},"TypeScript","typescript",[],{"title":31,"slug":32,"sections":33},"Best practices","best-practices",[],{"title":35,"slug":36,"sections":37},"Options","options",[],{"title":39,"slug":40,"sections":41},"Publishing","publishing",[],{"title":43,"slug":44,"sections":45},"Caveats","caveats",[]],"uses":{"params":["slug"]}}]}
