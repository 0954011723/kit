{"type":"data","nodes":[null,{"type":"data","data":[{"sections":1},[2,17,35,71,101,110,125],{"title":3,"pages":4},"Getting started",[5,8,11,14],{"title":6,"path":7},"Introduction","\u002Fdocs\u002Fintroduction",{"title":9,"path":10},"Creating a project","\u002Fdocs\u002Fcreating-a-project",{"title":12,"path":13},"Project structure","\u002Fdocs\u002Fproject-structure",{"title":15,"path":16},"Web standards","\u002Fdocs\u002Fweb-standards",{"title":18,"pages":19},"Core concepts",[20,23,26,29,32],{"title":21,"path":22},"Routing","\u002Fdocs\u002Frouting",{"title":24,"path":25},"Loading data","\u002Fdocs\u002Fload",{"title":27,"path":28},"Form actions","\u002Fdocs\u002Fform-actions",{"title":30,"path":31},"Page options","\u002Fdocs\u002Fpage-options",{"title":33,"path":34},"State management","\u002Fdocs\u002Fstate-management",{"title":36,"pages":37},"Build and deploy",[38,41,44,47,50,53,56,59,62,65,68],{"title":39,"path":40},"Building your app","\u002Fdocs\u002Fbuilding-your-app",{"title":42,"path":43},"Adapters","\u002Fdocs\u002Fadapters",{"title":45,"path":46},"Zero-config deployments","\u002Fdocs\u002Fadapter-auto",{"title":48,"path":49},"Node servers","\u002Fdocs\u002Fadapter-node",{"title":51,"path":52},"Static site generation","\u002Fdocs\u002Fadapter-static",{"title":54,"path":55},"Single-page apps","\u002Fdocs\u002Fsingle-page-apps",{"title":57,"path":58},"Cloudflare Pages","\u002Fdocs\u002Fadapter-cloudflare",{"title":60,"path":61},"Cloudflare Workers","\u002Fdocs\u002Fadapter-cloudflare-workers",{"title":63,"path":64},"Netlify","\u002Fdocs\u002Fadapter-netlify",{"title":66,"path":67},"Vercel","\u002Fdocs\u002Fadapter-vercel",{"title":69,"path":70},"Writing adapters","\u002Fdocs\u002Fwriting-adapters",{"title":72,"pages":73},"Advanced",[74,77,80,83,86,89,92,95,98],{"title":75,"path":76},"Advanced routing","\u002Fdocs\u002Fadvanced-routing",{"title":78,"path":79},"Hooks","\u002Fdocs\u002Fhooks",{"title":81,"path":82},"Errors","\u002Fdocs\u002Ferrors",{"title":84,"path":85},"Link options","\u002Fdocs\u002Flink-options",{"title":87,"path":88},"Service workers","\u002Fdocs\u002Fservice-workers",{"title":90,"path":91},"Server-only modules","\u002Fdocs\u002Fserver-only-modules",{"title":93,"path":94},"Asset handling","\u002Fdocs\u002Fassets",{"title":96,"path":97},"Snapshots","\u002Fdocs\u002Fsnapshots",{"title":99,"path":100},"Packaging","\u002Fdocs\u002Fpackaging",{"title":102,"pages":103},"Best practices",[104,107],{"title":105,"path":106},"Accessibility","\u002Fdocs\u002Faccessibility",{"title":108,"path":109},"SEO","\u002Fdocs\u002Fseo",{"title":111,"pages":112},"Reference",[113,116,119,122],{"title":114,"path":115},"Configuration","\u002Fdocs\u002Fconfiguration",{"title":117,"path":118},"Command Line Interface","\u002Fdocs\u002Fcli",{"title":120,"path":121},"Modules","\u002Fdocs\u002Fmodules",{"title":123,"path":124},"Types","\u002Fdocs\u002Ftypes",{"title":126,"pages":127},"Appendix",[128,131,134,137],{"title":129,"path":130},"Integrations","\u002Fdocs\u002Fintegrations",{"title":132,"path":133},"Migrating from Sapper","\u002Fdocs\u002Fmigrating",{"title":135,"path":136},"Additional resources","\u002Fdocs\u002Fadditional-resources",{"title":138,"path":139},"Glossary","\u002Fdocs\u002Fglossary"],"uses":{}},{"type":"data","data":[{"page":1},{"file":2,"slug":3,"title":4,"content":5,"sections":6},"docs\u002F20-core-concepts\u002F40-page-options.md","page-options","Page options","\u003Cp\u003EBy default, SvelteKit will render (or \u003Ca href=\"glossary#prerendering\"\u003Eprerender\u003C\u002Fa\u003E) any component first on the server and send it to the client as HTML. It will then render the component again in the browser to make it interactive in a process called \u003Ca href=\"glossary#hydration\"\u003E\u003Cstrong\u003Ehydration\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E. For this reason, you need to ensure that components can run in both places. SvelteKit will then initialize a \u003Ca href=\"routing\"\u003E\u003Cstrong\u003Erouter\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E that takes over subsequent navigations.\u003C\u002Fp\u003E\n\u003Cp\u003EYou can control each of these on a page-by-page basis by exporting options from \u003Ca href=\"routing#page-page-js\"\u003E\u003Ccode\u003E+page.js\u003C\u002Fcode\u003E\u003C\u002Fa\u003E or \u003Ca href=\"routing#page-page-server-js\"\u003E\u003Ccode\u003E+page.server.js\u003C\u002Fcode\u003E\u003C\u002Fa\u003E, or for groups of pages using a shared \u003Ca href=\"routing#layout-layout-js\"\u003E\u003Ccode\u003E+layout.js\u003C\u002Fcode\u003E\u003C\u002Fa\u003E or \u003Ca href=\"routing#layout-layout-server-js\"\u003E\u003Ccode\u003E+layout.server.js\u003C\u002Fcode\u003E\u003C\u002Fa\u003E. To define an option for the whole app, export it from the root layout. Child layouts and pages override values set in parent layouts, so — for example — you can enable prerendering for your entire app then disable it for pages that need to be dynamically rendered.\u003C\u002Fp\u003E\n\u003Cp\u003EYou can mix and match these options in different areas of your app. For example you could prerender your marketing page for maximum speed, server-render your dynamic pages for SEO and accessibility and turn your admin section into an SPA by rendering it on the client only. This makes SvelteKit very versatile.\u003C\u002Fp\u003E\n\u003Ch2 id=\"prerender\"\u003Eprerender\u003Ca href=\"#prerender\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003EIt&#39;s likely that at least some routes of your app can be represented as a simple HTML file generated at build time. These routes can be \u003Ca href=\"glossary#prerendering\"\u003E\u003Cem\u003Eprerendered\u003C\u002Fem\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003E+page.js\u002F+page.server.js\u002F+server.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const prerender: true' \u003Eprerender\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003EAlternatively, you can set \u003Ccode\u003Eexport const prerender = true\u003C\u002Fcode\u003E in your root \u003Ccode\u003E+layout.js\u003C\u002Fcode\u003E or \u003Ccode\u003E+layout.server.js\u003C\u002Fcode\u003E and prerender everything except pages that are explicitly marked as \u003Cem\u003Enot\u003C\u002Fem\u003E prerenderable:\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003E+page.js\u002F+page.server.js\u002F+server.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const prerender: false' \u003Eprerender\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Efalse\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003ERoutes with \u003Ccode\u003Eprerender = true\u003C\u002Fcode\u003E will be excluded from manifests used for dynamic SSR, making your server (or serverless\u002Fedge functions) smaller. In some cases you might want to prerender a route but also include it in the manifest (for example, with a route like \u003Ccode\u003E\u002Fblog\u002F[slug]\u003C\u002Fcode\u003E where you want to prerender your most recent\u002Fpopular content but server-render the long tail) — for these cases, there&#39;s a third option, &#39;auto&#39;:\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003E+page.js\u002F+page.server.js\u002F+server.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const prerender: \"auto\"' \u003Eprerender\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;auto&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cblockquote\u003E\n\u003Cp\u003EIf your entire app is suitable for prerendering, you can use \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fsveltejs\u002Fkit\u002Ftree\u002Fmaster\u002Fpackages\u002Fadapter-static\"\u003E\u003Ccode\u003Eadapter-static\u003C\u002Fcode\u003E\u003C\u002Fa\u003E, which will output files suitable for use with any static webserver.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003EThe prerenderer will start at the root of your app and generate files for any prerenderable pages or \u003Ccode\u003E+server.js\u003C\u002Fcode\u003E routes it finds. Each page is scanned for \u003Ccode\u003E&lt;a&gt;\u003C\u002Fcode\u003E elements that point to other pages that are candidates for prerendering — because of this, you generally don&#39;t need to specify which pages should be accessed. If you \u003Cem\u003Edo\u003C\u002Fem\u003E need to specify which pages should be accessed by the prerenderer, you can do so with the \u003Ccode\u003Eentries\u003C\u002Fcode\u003E option in the \u003Ca href=\"configuration#prerender\"\u003Eprerender configuration\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003EWhile prerendering, the value of \u003Ccode\u003Ebuilding\u003C\u002Fcode\u003E imported from \u003Ca href=\"modules#$app-environment\"\u003E\u003Ccode\u003E$app\u002Fenvironment\u003C\u002Fcode\u003E\u003C\u002Fa\u003E will be \u003Ccode\u003Etrue\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"prerender-prerendering-server-routes\"\u003EPrerendering server routes\u003Ca href=\"#prerender-prerendering-server-routes\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EUnlike the other page options, \u003Ccode\u003Eprerender\u003C\u002Fcode\u003E also applies to \u003Ccode\u003E+server.js\u003C\u002Fcode\u003E files. These files are \u003Cem\u003Enot\u003C\u002Fem\u003E affected from layouts, but will inherit default values from the pages that fetch data from them, if any. For example if a \u003Ccode\u003E+page.js\u003C\u002Fcode\u003E contains this \u003Ccode\u003Eload\u003C\u002Fcode\u003E function...\u003C\u002Fp\u003E\n\u003Cdiv class=\"js-version code-block\"\u003E\u003Cspan class=\"filename\"\u003E+page.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const prerender: true' \u003Eprerender\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E&nbsp;\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F** \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E@type\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E{import(&apos;.\u002F$types&apos;).PageLoad}\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E *\u002F\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Easync\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E\u003Cdata-lsp lsp='function load(event: \u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-loadevent\"\u003ELoadEvent\u003C\u002Fa\u003E&amp;lt;{}, Record&amp;lt;string, any\u003E | null, Record&amp;lt;string, any\u003E, string | null\u003E): \u003Ca href=\"\u002Fdocs\u002Ftypes#private-types-maybepromise\"\u003EMaybePromise\u003C\u002Fa\u003E&amp;lt;void | Record&amp;lt;string, any\u003E\u003E' \u003Eload\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E({ \u003Cdata-lsp lsp='(parameter) fetch: (input: RequestInfo | URL, init?: RequestInit | undefined) =\u003E Promise&amp;lt;Response\u003E' \u003Efetch\u003C\u002Fdata-lsp\u003E }) {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const res: Response' \u003Eres\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eawait\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E\u003Cdata-lsp lsp='(parameter) fetch: (input: RequestInfo | URL, init?: RequestInit | undefined) =\u003E Promise&amp;lt;Response\u003E' \u003Efetch\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E(\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;\u002Fmy-server-route.json&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E);\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Ereturn\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eawait\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const res: Response' \u003Eres\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E.\u003Cdata-lsp lsp='(method) Body.json(): Promise&amp;lt;any\u003E' \u003Ejson\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E();\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"ts-version code-block\"\u003E\u003Cspan class=\"filename\"\u003E+page.ts\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eimport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Etype\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E { \u003Cdata-lsp lsp='(alias) type PageLoad = Kit.\u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-load\"\u003ELoad\u003C\u002Fa\u003E&amp;lt;{}, Record&amp;lt;string, any\u003E | null, Record&amp;lt;string, any\u003E, void | Record&amp;lt;string, any\u003E, string | null\u003E&amp;#10;import PageLoad' \u003EPageLoad\u003C\u002Fdata-lsp\u003E } \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;.\u002F$types&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const prerender: true' \u003Eprerender\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E&nbsp;\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const load: ({ fetch }: \u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-loadevent\"\u003ELoadEvent\u003C\u002Fa\u003E&amp;lt;{}, Record&amp;lt;string, any\u003E | null, Record&amp;lt;string, any\u003E, string | null\u003E) =\u003E Promise&amp;lt;any\u003E' \u003Eload\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E (\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Easync\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E ({ \u003Cdata-lsp lsp='(parameter) fetch: (input: RequestInfo | URL, init?: RequestInit | undefined) =\u003E Promise&amp;lt;Response\u003E' \u003Efetch\u003C\u002Fdata-lsp\u003E }) \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=&gt;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const res: Response' \u003Eres\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eawait\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E\u003Cdata-lsp lsp='(parameter) fetch: (input: RequestInfo | URL, init?: RequestInit | undefined) =\u003E Promise&amp;lt;Response\u003E' \u003Efetch\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E(\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;\u002Fmy-server-route.json&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E);\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Ereturn\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eawait\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const res: Response' \u003Eres\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E.\u003Cdata-lsp lsp='(method) Body.json(): Promise&amp;lt;any\u003E' \u003Ejson\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E();\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E}) satisfies \u003Cdata-lsp lsp='(alias) type PageLoad = Kit.\u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-load\"\u003ELoad\u003C\u002Fa\u003E&amp;lt;{}, Record&amp;lt;string, any\u003E | null, Record&amp;lt;string, any\u003E, void | Record&amp;lt;string, any\u003E, string | null\u003E&amp;#10;import PageLoad' \u003EPageLoad\u003C\u002Fdata-lsp\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E...then \u003Ccode\u003Esrc\u002Froutes\u002Fmy-server-route.json\u002F+server.js\u003C\u002Fcode\u003E will be treated as prerenderable if it doesn&#39;t contain its own \u003Ccode\u003Eexport const prerender = false\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"prerender-when-not-to-prerender\"\u003EWhen not to prerender\u003Ca href=\"#prerender-when-not-to-prerender\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EThe basic rule is this: for a page to be prerenderable, any two users hitting it directly must get the same content from the server.\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003ENot all pages are suitable for prerendering. Any content that is prerendered will be seen by all users. You can of course fetch personalized data in \u003Ccode\u003EonMount\u003C\u002Fcode\u003E in a prerendered page, but this may result in a poorer user experience since it will involve blank initial content or loading indicators.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003ENote that you can still prerender pages that load data based on the page&#39;s parameters, such as a \u003Ccode\u003Esrc\u002Froutes\u002Fblog\u002F[slug]\u002F+page.svelte\u003C\u002Fcode\u003E route.\u003C\u002Fp\u003E\n\u003Cp\u003EAccessing \u003Ca href=\"load#using-url-data-url\"\u003E\u003Ccode\u003Eurl.searchParams\u003C\u002Fcode\u003E\u003C\u002Fa\u003E during prerendering is forbidden. If you need to use it, ensure you are only doing so in the browser (for example in \u003Ccode\u003EonMount\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\n\u003Cp\u003EPages with \u003Ca href=\"form-actions\"\u003Eactions\u003C\u002Fa\u003E cannot be prerendered, because a server must be able to handle the action \u003Ccode\u003EPOST\u003C\u002Fcode\u003E requests.\u003C\u002Fp\u003E\n\u003Ch3 id=\"prerender-prerender-and-ssr\"\u003EPrerender and ssr\u003Ca href=\"#prerender-prerender-and-ssr\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EIf you set the \u003Ca href=\"#ssr\"\u003Essr option\u003C\u002Fa\u003E to \u003Ccode\u003Efalse\u003C\u002Fcode\u003E, each request will result in the same empty HTML shell. Since this would result in unnecessary work, SvelteKit defaults to prerendering any pages it finds where \u003Ccode\u003Eprerender\u003C\u002Fcode\u003E is not explicitly set to \u003Ccode\u003Efalse\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Ch3 id=\"prerender-route-conflicts\"\u003ERoute conflicts\u003Ca href=\"#prerender-route-conflicts\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EBecause prerendering writes to the filesystem, it isn&#39;t possible to have two endpoints that would cause a directory and a file to have the same name. For example, \u003Ccode\u003Esrc\u002Froutes\u002Ffoo\u002F+server.js\u003C\u002Fcode\u003E and \u003Ccode\u003Esrc\u002Froutes\u002Ffoo\u002Fbar\u002F+server.js\u003C\u002Fcode\u003E would try to create \u003Ccode\u003Efoo\u003C\u002Fcode\u003E and \u003Ccode\u003Efoo\u002Fbar\u003C\u002Fcode\u003E, which is impossible.\u003C\u002Fp\u003E\n\u003Cp\u003EFor that reason among others, it&#39;s recommended that you always include a file extension — \u003Ccode\u003Esrc\u002Froutes\u002Ffoo.json\u002F+server.js\u003C\u002Fcode\u003E and \u003Ccode\u003Esrc\u002Froutes\u002Ffoo\u002Fbar.json\u002F+server.js\u003C\u002Fcode\u003E would result in \u003Ccode\u003Efoo.json\u003C\u002Fcode\u003E and \u003Ccode\u003Efoo\u002Fbar.json\u003C\u002Fcode\u003E files living harmoniously side-by-side.\u003C\u002Fp\u003E\n\u003Cp\u003EFor \u003Cem\u003Epages\u003C\u002Fem\u003E, we skirt around this problem by writing \u003Ccode\u003Efoo\u002Findex.html\u003C\u002Fcode\u003E instead of \u003Ccode\u003Efoo\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003ENote that this will disable client-side routing for any navigation from this page, regardless of whether the router is already active.\u003C\u002Fp\u003E\n\u003Ch3 id=\"prerender-troubleshooting\"\u003ETroubleshooting\u003Ca href=\"#prerender-troubleshooting\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003EIf you encounter an error like &#39;The following routes were marked as prerenderable, but were not prerendered&#39; it&#39;s because the route in question (or a parent layout, if it&#39;s a page) has \u003Ccode\u003Eexport const prerender = true\u003C\u002Fcode\u003E but the page wasn&#39;t actually prerendered, because it wasn&#39;t reached by the prerendering crawler.\u003C\u002Fp\u003E\n\u003Cp\u003ESince these routes cannot be dynamically server-rendered, this will cause errors when people try to access the route in question. There are two ways to fix it:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EEnsure that SvelteKit can find the route by following links from \u003Ca href=\"configuration#prerender\"\u003E\u003Ccode\u003Econfig.kit.prerender.entries\u003C\u002Fcode\u003E\u003C\u002Fa\u003E. Add links to dynamic routes (i.e. pages with \u003Ccode\u003E[parameters]\u003C\u002Fcode\u003E ) to this option if they are not found through crawling the other entry points, else they are not prerendered because SvelteKit doesn&#39;t know what value the parameters should have. Pages not marked as prerenderable will be ignored and their links to other pages will not be crawled, even if some of them would be prerenderable.\u003C\u002Fli\u003E\n\u003Cli\u003EChange \u003Ccode\u003Eexport const prerender = true\u003C\u002Fcode\u003E to \u003Ccode\u003Eexport const prerender = &#39;auto&#39;\u003C\u002Fcode\u003E. Routes with \u003Ccode\u003E&#39;auto&#39;\u003C\u002Fcode\u003E can be dynamically server rendered\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"ssr\"\u003Essr\u003Ca href=\"#ssr\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003ENormally, SvelteKit renders your page on the server first and sends that HTML to the client where it&#39;s \u003Ca href=\"glossary#hydration\"\u003Ehydrated\u003C\u002Fa\u003E. If you set \u003Ccode\u003Essr\u003C\u002Fcode\u003E to \u003Ccode\u003Efalse\u003C\u002Fcode\u003E, it renders an empty &#39;shell&#39; page instead. This is useful if your page is unable to be rendered on the server (because you use browser-only globals like \u003Ccode\u003Edocument\u003C\u002Fcode\u003E for example), but in most situations it&#39;s not recommended (\u003Ca href=\"glossary#ssr\"\u003Esee appendix\u003C\u002Fa\u003E).\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003E+page.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const ssr: false' \u003Essr\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Efalse\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003EIf you add \u003Ccode\u003Eexport const ssr = false\u003C\u002Fcode\u003E to your root \u003Ccode\u003E+layout.js\u003C\u002Fcode\u003E, your entire app will only be rendered on the client — which essentially means you turn your app into an SPA.\u003C\u002Fp\u003E\n\u003Ch2 id=\"csr\"\u003Ecsr\u003Ca href=\"#csr\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003EOrdinarily, SvelteKit \u003Ca href=\"glossary#hydration\"\u003Ehydrates\u003C\u002Fa\u003E your server-rendered HTML into an interactive client-side-rendered (CSR) page. Some pages don&#39;t require JavaScript at all — many blog posts and &#39;about&#39; pages fall into this category. In these cases you can disable CSR:\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003E+page.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const csr: false' \u003Ecsr\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Efalse\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cblockquote\u003E\n\u003Cp\u003EIf both \u003Ccode\u003Essr\u003C\u002Fcode\u003E and \u003Ccode\u003Ecsr\u003C\u002Fcode\u003E are \u003Ccode\u003Efalse\u003C\u002Fcode\u003E, nothing will be rendered!\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"trailingslash\"\u003EtrailingSlash\u003Ca href=\"#trailingslash\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003EBy default, SvelteKit will remove trailing slashes from URLs — if you visit \u003Ccode\u003E\u002Fabout\u002F\u003C\u002Fcode\u003E, it will respond with a redirect to \u003Ccode\u003E\u002Fabout\u003C\u002Fcode\u003E. You can change this behaviour with the \u003Ccode\u003EtrailingSlash\u003C\u002Fcode\u003E option, which can be one of \u003Ccode\u003E&#39;never&#39;\u003C\u002Fcode\u003E (the default), \u003Ccode\u003E&#39;always&#39;\u003C\u002Fcode\u003E, or \u003Ccode\u003E&#39;ignore&#39;\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003EAs with other page options, you can export this value from a \u003Ccode\u003E+layout.js\u003C\u002Fcode\u003E or a \u003Ccode\u003E+layout.server.js\u003C\u002Fcode\u003E and it will apply to all child pages. You can also export the configuration from \u003Ccode\u003E+server.js\u003C\u002Fcode\u003E files.\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003Esrc\u002Froutes\u002F+layout.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const trailingSlash: \"always\"' \u003EtrailingSlash\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;always&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003EThis option also affects \u003Ca href=\"#prerender\"\u003Eprerendering\u003C\u002Fa\u003E. If \u003Ccode\u003EtrailingSlash\u003C\u002Fcode\u003E is \u003Ccode\u003Ealways\u003C\u002Fcode\u003E, a route like \u003Ccode\u003E\u002Fabout\u003C\u002Fcode\u003E will result in an \u003Ccode\u003Eabout\u002Findex.html\u003C\u002Fcode\u003E file, otherwise it will create \u003Ccode\u003Eabout.html\u003C\u002Fcode\u003E, mirroring static webserver conventions.\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EIgnoring trailing slashes is not recommended — the semantics of relative paths differ between the two cases (\u003Ccode\u003E.\u002Fy\u003C\u002Fcode\u003E from \u003Ccode\u003E\u002Fx\u003C\u002Fcode\u003E is \u003Ccode\u003E\u002Fy\u003C\u002Fcode\u003E, but from \u003Ccode\u003E\u002Fx\u002F\u003C\u002Fcode\u003E is \u003Ccode\u003E\u002Fx\u002Fy\u003C\u002Fcode\u003E), and \u003Ccode\u003E\u002Fx\u003C\u002Fcode\u003E and \u003Ccode\u003E\u002Fx\u002F\u003C\u002Fcode\u003E are treated as separate URLs which is harmful to SEO.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"config\"\u003Econfig\u003Ca href=\"#config\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003EWith the concept of \u003Ca href=\"\u002Fdocs\u002Fadapters\"\u003Eadapters\u003C\u002Fa\u003E, SvelteKit is able to run on a variety of platforms. Each of these might have specific configuration to further tweak the deployment — for example on Vercel you could choose to deploy some parts of your app on the edge and others on serverless environments.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Econfig\u003C\u002Fcode\u003E is an object with key-value pairs at the top level. Beyond that, the concrete shape is dependent on the adapter you&#39;re using. Every adapter should provide a \u003Ccode\u003E\u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E\u003C\u002Fcode\u003E interface to import for type safety. Consult the documentation of your adapter for more information.\u003C\u002Fp\u003E\n\u003Cdiv class=\"js-version code-block\"\u003E\u003Cspan class=\"filename\"\u003Esrc\u002Froutes\u002F+page.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E\u002F** \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E@type\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E{import(&apos;some-adapter&apos;).\u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E}\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-comment)\"\u003E *\u002F\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const config: \u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E' \u003Econfig\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003Cdata-lsp lsp='(property) \u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E.runtime: string' \u003Eruntime\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;edge&apos;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E};\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"ts-version code-block\"\u003E\u003Cspan class=\"filename\"\u003Esrc\u002Froutes\u002F+page.ts\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eimport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Etype\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E { \u003Cdata-lsp lsp='(alias) interface \u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E&amp;#10;import \u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E' \u003E\u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E\u003C\u002Fdata-lsp\u003E } \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;some-adapter&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E&nbsp;\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const config: \u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E' \u003Econfig\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-function)\"\u003E\u003Cdata-lsp lsp='(alias) interface \u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E&amp;#10;import \u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E' \u003E\u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003Cdata-lsp lsp='(property) \u003Ca href=\"\u002Fdocs\u002Ftypes#public-types-config\"\u003EConfig\u003C\u002Fa\u003E.runtime: string' \u003Eruntime\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;edge&apos;\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E};\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Ccode\u003Econfig\u003C\u002Fcode\u003E objects are merged at the top level (but \u003Cem\u003Enot\u003C\u002Fem\u003E deeper levels). This means you don&#39;t need to repeat all the values in a \u003Ccode\u003E+page.js\u003C\u002Fcode\u003E if you want to only override some of the values in the upper \u003Ccode\u003E+layout.js\u003C\u002Fcode\u003E. For example this layout configuration...\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003Esrc\u002Froutes\u002F+layout.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const config: {&amp;#10;    runtime: string;&amp;#10;    regions: string;&amp;#10;    foo: {&amp;#10;        bar: boolean;&amp;#10;    };&amp;#10;}' \u003Econfig\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003Cdata-lsp lsp='(property) runtime: string' \u003Eruntime\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;edge&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-punctuation)\"\u003E,\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003Cdata-lsp lsp='(property) regions: string' \u003Eregions\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;all&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-punctuation)\"\u003E,\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003Cdata-lsp lsp='(property) foo: {&amp;#10;    bar: boolean;&amp;#10;}' \u003Efoo\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E    \u003Cdata-lsp lsp='(property) bar: boolean' \u003Ebar\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Etrue\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  }\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E...is overridden by this page configuration...\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block\"\u003E\u003Cspan class=\"filename\"\u003Esrc\u002Froutes\u002F+page.js\u003C\u002Fspan\u003E\u003Cpre class=\"shiki twoslash lsp\" style=\"background-color: var(--shiki-color-background); color: var(--shiki-color-text)\"\u003E\u003Cdiv class=\"language-id\"\u003Ets\u003C\u002Fdiv\u003E\u003Cdiv class='code-container'\u003E\u003Ccode\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Eexport\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003Econst\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003E\u003Cdata-lsp lsp='const config: {&amp;#10;    regions: string[];&amp;#10;    foo: {&amp;#10;        baz: boolean;&amp;#10;    };&amp;#10;}' \u003Econfig\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E=\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003Cdata-lsp lsp='(property) regions: string[]' \u003Eregions\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E [\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;us1&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-punctuation)\"\u003E,\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-string-expression)\"\u003E&apos;us2&apos;\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E]\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-punctuation)\"\u003E,\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  \u003Cdata-lsp lsp='(property) foo: {&amp;#10;    baz: boolean;&amp;#10;}' \u003Efoo\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E {\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E    \u003Cdata-lsp lsp='(property) baz: boolean' \u003Ebaz\u003C\u002Fdata-lsp\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-keyword)\"\u003E:\u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E \u003C\u002Fspan\u003E\u003Cspan style=\"color: var(--shiki-token-constant)\"\u003Etrue\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E  }\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv class='line'\u003E\u003Cspan style=\"color: var(--shiki-color-text)\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fcode\u003E\u003C\u002Fdiv\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E...which results in the config value \u003Ccode\u003E{ runtime: &#39;edge&#39;, regions: [&#39;us1&#39;, &#39;us2&#39;], foo: { baz: true } }\u003C\u002Fcode\u003E for that page.\u003C\u002Fp\u003E\n\u003Ch2 id=\"further-reading\"\u003EFurther reading\u003Ca href=\"#further-reading\" class=\"permalink\"\u003E\u003Cspan class=\"visually-hidden\"\u003Epermalink\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Flearn.svelte.dev\u002Ftutorial\u002Fpage-options\"\u003ETutorial: Page options\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n",[7,25,28,31,35,38],{"title":8,"slug":8,"sections":9},"prerender",[10,13,16,19,22],{"title":11,"slug":12},"Prerendering server routes","prerender-prerendering-server-routes",{"title":14,"slug":15},"When not to prerender","prerender-when-not-to-prerender",{"title":17,"slug":18},"Prerender and ssr","prerender-prerender-and-ssr",{"title":20,"slug":21},"Route conflicts","prerender-route-conflicts",{"title":23,"slug":24},"Troubleshooting","prerender-troubleshooting",{"title":26,"slug":26,"sections":27},"ssr",[],{"title":29,"slug":29,"sections":30},"csr",[],{"title":32,"slug":33,"sections":34},"trailingSlash","trailingslash",[],{"title":36,"slug":36,"sections":37},"config",[],{"title":39,"slug":40,"sections":41},"Further reading","further-reading",[]],"uses":{"params":["slug"]}}]}
